[{"C:\\ZujoTask\\image_upload_mern\\frontend\\src\\index.js":"1","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\reportWebVitals.js":"2","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\App.js":"3","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\screens\\FileUploadScreen.js":"4","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\data\\api.js":"5","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\screens\\FileList.js":"6","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\screens\\Pagination.js":"7"},{"size":500,"mtime":1610639324000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610639324000,"results":"10","hashOfConfig":"9"},{"size":1406,"mtime":1651814734054,"results":"11","hashOfConfig":"9"},{"size":7277,"mtime":1651834717032,"results":"12","hashOfConfig":"9"},{"size":897,"mtime":1651833342577,"results":"13","hashOfConfig":"9"},{"size":5716,"mtime":1651833378507,"results":"14","hashOfConfig":"9"},{"size":593,"mtime":1651824167729,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1p1mz8l",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\ZujoTask\\image_upload_mern\\frontend\\src\\index.js",[],["34","35"],"C:\\ZujoTask\\image_upload_mern\\frontend\\src\\reportWebVitals.js",[],"C:\\ZujoTask\\image_upload_mern\\frontend\\src\\App.js",["36","37","38"],"import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { BrowserRouter as Router,Routes, Route, Link } from 'react-router-dom';\n\nimport FileUploadScreen from './screens/FileUploadScreen';\nimport FileList from './screens/FileList';\nimport {getSingleFiles, getMultipleFiles} from './data/api';\n\nfunction App() {\n  const [singleFiles, setSingleFiles] = useState([]);\n  const [multipleFiles, setMultipleFiles] = useState([]);\n\n  const getSingleFileslist = async () => {\n    try {\n        const fileslist = await getSingleFiles();\n        setSingleFiles(fileslist);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  const getMultipleFilesList = async () => {\n    try {\n        const fileslist = await getMultipleFiles();\n        setMultipleFiles(fileslist);\n        console.log(multipleFiles);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  useEffect(() => {\n    getSingleFileslist();\n    getMultipleFilesList();\n  }, []);\n  return (\n    <>\n         \n           \n           <Router>\n             <Routes>\n             <Route exact path='/' element={ <FileUploadScreen  />}>\n                    \n                  </Route>\n                 <Route exact path='/filelist' element={<FileList />}>\n                     \n                 </Route>\n             </Routes>\n                 \n                \n          </Router>\n          \n    </>\n  );\n}\n\nexport default App;\n","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\screens\\FileUploadScreen.js",["39","40","41","42","43"],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { singleFileUpload, multipleFilesUpload } from '../data/api';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\n\n// const FileUploadScreen = (props) => {\n//     const [singleFile, setSingleFile] = useState('');\n//     const [multipleFiles, setMultipleFiles] = useState('');\n//     const [title, setTitle] =  useState('');\n//     const [singleProgress, setSingleProgress] = useState(0);\n//     const [multipleProgress, setMultipleProgress] = useState(0);\n//     const navigate = useNavigate();\n\n\n\n//     const SingleFileChange = (e) => {\n//         setSingleFile(e.target.files[0]);\n//         setSingleProgress(0);\n//     }\n//     const MultipleFileChange = (e) => {\n//         setMultipleFiles(e.target.files);\n//         setMultipleProgress(0);\n//     }\n//     const singleFileOptions = {\n//         onUploadProgress: (progressEvent) => {\n//             const {loaded, total} = progressEvent;\n//             const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\n//             setSingleProgress(percentage);\n//         }\n//     }\n//     const mulitpleFileOptions = {\n//         onUploadProgress: (progressEvent) => {\n//             const {loaded, total} = progressEvent;\n//             const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\n//             setMultipleProgress(percentage);\n//         }\n//     }\n//     const uploadSingleFile = async () => {\n//         const formData = new FormData();\n//         formData.append('file', singleFile);\n//         await singleFileUpload(formData, singleFileOptions);\n//         //  props.getsingle();\n//         props.get\n//         navigate('/FileList')\n\n//     }\n//     const UploadMultipleFiles = async () => {\n//         const formData = new FormData();\n//         formData.append('title', title);\n//         for (let i = 0; i < multipleFiles.length; i++) {\n//             formData.append('files', multipleFiles[i]);                      \n//         }\n//         await multipleFilesUpload(formData, mulitpleFileOptions);\n//         props.getMultiple();\n//     }\n// import React, {useState, useEffect} from 'react';\n// import {singleFileUpload, multipleFilesUpload} from '../data/api';\n// import {CircularProgressbar, buildStyles} from 'react-circular-progressbar';\n// import 'react-circular-progressbar/dist/styles.css';\n\n\nconst FileUploadScreen = (props) => {\n    const [singleFile, setSingleFile] = useState('');\n    const [multipleFiles, setMultipleFiles] = useState('');\n    const [title, setTitle] = useState('');\n    const [singleProgress, setSingleProgress] = useState(0);\n    const [multipleProgress, setMultipleProgress] = useState(0);\n    const navigate = useNavigate();\n\n\n    const SingleFileChange = (e) => {\n        setSingleFile(e.target.files[0]);\n        setSingleProgress(0);\n    }\n    const MultipleFileChange = (e) => {\n        setMultipleFiles(e.target.files);\n        setMultipleProgress(0);\n    }\n    const singleFileOptions = {\n        onUploadProgress: (progressEvent) => {\n            const { loaded, total } = progressEvent;\n            const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\n            setSingleProgress(percentage);\n        }\n    }\n    const mulitpleFileOptions = {\n        onUploadProgress: (progressEvent) => {\n            const { loaded, total } = progressEvent;\n            const percentage = Math.floor(((loaded / 1000) * 100) / (total / 1000));\n            setMultipleProgress(percentage);\n        }\n    }\n    const uploadSingleFile = async () => {\n        const formData = new FormData();\n        formData.append('file', singleFile);\n        await singleFileUpload(formData, singleFileOptions);\n        // props.getsingle();\n        navigate('/filelist')\n    }\n    const UploadMultipleFiles = async () => {\n        const formData = new FormData();\n        formData.append('title', title);\n        for (let i = 0; i < multipleFiles.length; i++) {\n            formData.append('files', multipleFiles[i]);\n        }\n        await multipleFilesUpload(formData, mulitpleFileOptions);\n        // props.getMultiple();\n        navigate('/filelist')\n\n    }\n    return (\n        <div className=\"row mt-3\">\n            <div className=\"col-6\">\n                <div className=\"container\">\n                    <h3 className=\"text-danger font-weight-bolder border-bottom text-center\">File Upload Using MERN Stack </h3>\n                </div>\n                 {/* <div className=\"form-group\">\n                    <label>Select  File</label>\n                    <input type=\"file\" className=\"form-control\" onChange={(e) => SingleFileChange(e)} />\n                </div> \n               \n                  <div className=\"row\">\n                    <div className=\"col-10\">\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={() => uploadSingleFile()} >Upload</button>\n                    </div>\n                    <div className=\"col-2\">\n                        <CircularProgressbar\n                            value={singleProgress}\n                            text={`${singleProgress}%`}\n                            styles={buildStyles({\n                                rotation: 0.25,\n                                strokeLinecap: 'butt',\n                                textSize: '16px',\n                                pathTransitionDuration: 0.5,\n                                pathColor: `rgba(255, 136, 136, ${singleProgress / 100})`,\n                                textColor: '#f88',\n                                trailColor: '#d6d6d6',\n                                backgroundColor: '#3e98c7',\n                            })}\n                        />\n                    </div>\n                </div>    */}\n\n                <div className=\"form-group\">\n                    <label>Select Multiple Files</label>\n                    <input type=\"file\" onChange={(e) => MultipleFileChange(e)} className=\"form-control\" multiple />\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-10\">\n                        <button type=\"button\" onClick={() => UploadMultipleFiles()} className=\"btn btn-danger\">Upload</button>\n                    </div>\n                    <div className=\"col-2\">\n                        <CircularProgressbar\n                            value={multipleProgress}\n                            text={`${multipleProgress}%`}\n                            styles={buildStyles({\n                                rotation: 0.25,\n                                strokeLinecap: 'butt',\n                                textSize: '16px',\n                                pathTransitionDuration: 0.5,\n                                pathColor: `rgba(255, 136, 136, ${multipleProgress / 100})`,\n                                textColor: '#f88',\n                                trailColor: '#d6d6d6',\n                                backgroundColor: '#3e98c7',\n                            })}\n                        />\n                    </div>\n                </div>\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default FileUploadScreen;","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\data\\api.js",[],"C:\\ZujoTask\\image_upload_mern\\frontend\\src\\screens\\FileList.js",["44"],"import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\nimport { getSingleFiles, getMultipleFiles } from '../data/api';\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\n\r\nconst FileList = () => {\r\n    const [singleFiles, setSingleFiles] = useState([]);\r\n    const [multipleFiles, setMultipleFiles] = useState([]);\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const usersPerPage = 5;\r\n    const pagesVisited = pageNumber * usersPerPage;\r\n\r\n\r\n    const getSingleFileslist = async () => {\r\n        try {\r\n            const fileslist = await getSingleFiles();\r\n            setSingleFiles(fileslist);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const getMultipleFilesList = async () => {\r\n        try {\r\n            const fileslist = await getMultipleFiles();\r\n            setMultipleFiles(fileslist);\r\n            console.log(multipleFiles);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        getSingleFileslist();\r\n        getMultipleFilesList();\r\n    }, []);\r\n\r\n  \r\n\r\n    const displayList = singleFiles\r\n    .slice(pagesVisited, pagesVisited + usersPerPage)\r\n    .map((file, index) => {\r\n      return (\r\n        <div className=\"user\"><table>\r\n         <tr>\r\n             <td> <h4>{file.fileName}{file.createdAt}</h4></td> \r\n             <td> <h4 className='h4class'><img src={`http://localhost:8080/${file.filePath}`}  height=\"85px\" width=\"85px\"  alt=\"img\" /></h4></td>\r\n          {/* <h3>{user.email}</h3> */}\r\n          </tr>\r\n          </table>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    const displayList2 = multipleFiles\r\n    .slice(pagesVisited, pagesVisited + usersPerPage)\r\n    .map((element, index) =>\r\n        <div key={element._id}>\r\n            <h6 className=\"text-danger font-weight-bold\">{element._id}</h6>\r\n            <div className=\"row\">\r\n              {element.files.map((file, index) =>\r\n                              <div className=\"user\"><table>\r\n                <tr>\r\n                    <td> <h4>{file.fileName}{file.createdAt}</h4></td> \r\n                    <td> <h4 className='h4class'><img src={`http://localhost:8080/${file.filePath}`}  height=\"85px\" width=\"85px\"  alt=\"img\" /></h4></td>\r\n                 </tr>\r\n                 </table>\r\n{                 console.log(\"length...\",element.files)\r\n}\r\n               </div>\r\n               )} \r\n               \r\n              </div>\r\n        </div>\r\n      )\r\n    //   console.log(\"displayList\",displayList2)\r\n\r\n   \r\n    const pageCount = Math.ceil(singleFiles.length / usersPerPage);\r\n\r\n    const changePage = ({ selected }) => {\r\n        setPageNumber(selected);\r\n    };\r\n    return (\r\n        <>\r\n\r\n            <div className=\"container-fluid mt-5\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <h2 className=\"text-success font-weight-bold\">Image List</h2>\r\n                        <div className=\"row\">\r\n                            {/* {singleFiles.map((file, index) =>\r\n                                <div className=\"col-6\">\r\n                                    <div className=\"card mb-2 border-0 p-0\">\r\n                                        <table boredr=\"1\">\r\n                                            <tr>\r\n                                                <td>{file.fileName}{file.createdAt} </td>\r\n                                                <td width=\"200\"><img src={`http://localhost:8080/${file.filePath}`} height=\"75\" className=\"card-img-top img-responsive\" alt=\"img\" /></td>\r\n                                            </tr>\r\n                                        </table>\r\n                                    </div>\r\n                                </div>\r\n                            )} */}\r\n                            {displayList} <br/>\r\n\r\n                            <ReactPaginate\r\n                                previousLabel={\"Previous\"}\r\n                                nextLabel={\"Next\"}\r\n                                pageCount={pageCount}\r\n                                onPageChange={changePage}\r\n                                containerClassName={\"paginationBttns\"}\r\n                                previousLinkClassName={\"previousBttn\"}\r\n                                nextLinkClassName={\"nextBttn\"}\r\n                                disabledClassName={\"paginationDisabled\"}\r\n                                activeClassName={\"paginationActive\"}\r\n                            />\r\n                                                        {displayList2} <br/>\r\n\r\n                             {/* {displayList1} <br/> */}\r\n\r\n\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"col-6\">\r\n               <h4 className=\"text-success font-weight-bold\">Multiple Files List</h4>\r\n               {multipleFiles.map((element, index) =>\r\n                  <div key={element._id}>\r\n                      <h6 className=\"text-danger font-weight-bold\">{element.title}</h6>\r\n                      <div className=\"row\">\r\n                        {element.files.map((file, index) =>\r\n                          <div className=\"col-6\">\r\n                              <div className=\"card mb-2 border-0 p-0\">\r\n                                <img src={`http://localhost:8080/${file.filePath}`} height=\"200\" className=\"card-img-top img-responsive\" alt=\"img\"/>\r\n                                </div>\r\n                            </div>\r\n                         )}\r\n                        </div>\r\n                  </div>\r\n                )}\r\n             </div> */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default FileList;\r\n\r\n\r\n\r\n","C:\\ZujoTask\\image_upload_mern\\frontend\\src\\screens\\Pagination.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":49,"nodeType":"51","messageId":"52","endLine":3,"endColumn":53},{"ruleId":"49","severity":1,"message":"53","line":10,"column":10,"nodeType":"51","messageId":"52","endLine":10,"endColumn":21},{"ruleId":"54","severity":1,"message":"55","line":33,"column":6,"nodeType":"56","endLine":33,"endColumn":8,"suggestions":"57"},{"ruleId":"49","severity":1,"message":"58","line":1,"column":27,"nodeType":"51","messageId":"52","endLine":1,"endColumn":36},{"ruleId":"49","severity":1,"message":"59","line":67,"column":19,"nodeType":"51","messageId":"52","endLine":67,"endColumn":27},{"ruleId":"49","severity":1,"message":"60","line":68,"column":12,"nodeType":"51","messageId":"52","endLine":68,"endColumn":26},{"ruleId":"49","severity":1,"message":"61","line":73,"column":11,"nodeType":"51","messageId":"52","endLine":73,"endColumn":27},{"ruleId":"49","severity":1,"message":"62","line":95,"column":11,"nodeType":"51","messageId":"52","endLine":95,"endColumn":27},{"ruleId":"54","severity":1,"message":"55","line":38,"column":8,"nodeType":"56","endLine":38,"endColumn":10,"suggestions":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'singleFiles' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMultipleFilesList'. Either include it or remove the dependency array.","ArrayExpression",["66"],"'useEffect' is defined but never used.","'setTitle' is assigned a value but never used.","'singleProgress' is assigned a value but never used.","'SingleFileChange' is assigned a value but never used.","'uploadSingleFile' is assigned a value but never used.",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"68","fix":"70"},"Update the dependencies array to be: [getMultipleFilesList]",{"range":"71","text":"72"},{"range":"73","text":"72"},[958,960],"[getMultipleFilesList]",[1088,1090]]